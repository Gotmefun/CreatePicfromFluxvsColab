import React, { useState } from 'react';
import { useAppContext } from '../hooks/useAppContext';
import { AppSettings } from '../types';
import { 
  Save, 
  Settings as SettingsIcon, 
  Link, 
  Database, 
  Palette, 
  Download,
  Upload,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  ExternalLink
} from 'lucide-react';

export default function Settings() {
  const { state, dispatch } = useAppContext();
  const [settings, setSettings] = useState<AppSettings>(state.settings);
  const [activeTab, setActiveTab] = useState<'general' | 'colab' | 'drive' | 'models'>('general');
  const [testingConnection, setTestingConnection] = useState<'colab' | 'drive' | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<{
    colab: 'connected' | 'disconnected' | 'testing';
    drive: 'connected' | 'disconnected' | 'testing';
  }>({
    colab: 'disconnected',
    drive: 'disconnected'
  });

  // Sync settings ‡∏Å‡∏±‡∏ö state ‡πÄ‡∏°‡∏∑‡πà‡∏≠ state ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  React.useEffect(() => {
    setSettings(state.settings);
  }, [state.settings]);

  const tabs = [
    { id: 'general', name: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', icon: SettingsIcon },
    { id: 'colab', name: 'Google Colab', icon: Link },
    { id: 'drive', name: 'Google Drive', icon: Database },
    { id: 'models', name: 'AI Models', icon: Palette },
  ] as const;

  const handleSave = () => {
    console.log('üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å settings:', settings);
    dispatch({ type: 'SET_SETTINGS', payload: settings });
    console.log('‚úÖ ‡∏™‡πà‡∏á dispatch ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! üéâ');
  };

  const testConnection = async (service: 'colab' | 'drive') => {
    setTestingConnection(service);
    setConnectionStatus(prev => ({ ...prev, [service]: 'testing' }));

    try {
      // Simulate connection test
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock success/failure
      const isSuccess = Math.random() > 0.3;
      setConnectionStatus(prev => ({ 
        ...prev, 
        [service]: isSuccess ? 'connected' : 'disconnected' 
      }));
      
      if (!isSuccess) {
        alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ${service === 'colab' ? 'Google Colab' : 'Google Drive'} ‡πÑ‡∏î‡πâ`);
      }
    } catch (error) {
      setConnectionStatus(prev => ({ ...prev, [service]: 'disconnected' }));
    } finally {
      setTestingConnection(null);
    }
  };

  const exportSettings = () => {
    const dataStr = JSON.stringify(settings, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'ai-image-gen-settings.json';
    link.click();
    URL.revokeObjectURL(url);
  };

  const importSettings = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const importedSettings = JSON.parse(e.target?.result as string);
          setSettings(importedSettings);
          alert('‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
        } catch (error) {
          alert('‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        }
      };
      reader.readAsText(file);
    }
  };

  const getStatusIcon = (status: 'connected' | 'disconnected' | 'testing') => {
    switch (status) {
      case 'connected':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'disconnected':
        return <AlertTriangle className="w-4 h-4 text-red-600" />;
      case 'testing':
        return <RefreshCw className="w-4 h-4 text-blue-600 animate-spin" />;
    }
  };

  const getStatusText = (status: 'connected' | 'disconnected' | 'testing') => {
    switch (status) {
      case 'connected':
        return '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß';
      case 'disconnected':
        return '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      case 'testing':
        return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...';
    }
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Settings</h1>
          <p className="text-gray-600">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</p>
        </div>
        <div className="flex items-center space-x-3">
          <label className="btn-secondary cursor-pointer">
            <Upload className="w-4 h-4 mr-2" />
            Import Settings
            <input
              type="file"
              accept=".json"
              onChange={importSettings}
              className="hidden"
            />
          </label>
          <button onClick={exportSettings} className="btn-secondary">
            <Download className="w-4 h-4 mr-2" />
            Export Settings
          </button>
          <button onClick={handleSave} className="btn-primary">
            <Save className="w-4 h-4 mr-2" />
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Tabs Sidebar */}
        <div className="lg:col-span-1">
          <div className="card p-4">
            <nav className="space-y-1">
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`
                      w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors
                      ${activeTab === tab.id 
                        ? 'bg-primary-100 text-primary-700' 
                        : 'text-gray-700 hover:bg-gray-100'
                      }
                    `}
                  >
                    <Icon className="w-4 h-4 mr-3" />
                    {tab.name}
                  </button>
                );
              })}
            </nav>
          </div>
        </div>

        {/* Settings Content */}
        <div className="lg:col-span-3">
          <div className="card p-6">
            {activeTab === 'general' && (
              <div className="space-y-6">
                <h2 className="text-lg font-semibold text-gray-900">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      AI Model ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    </label>
                    <select
                      value={settings.defaultModel}
                      onChange={(e) => setSettings(prev => ({ 
                        ...prev, 
                        defaultModel: e.target.value as any 
                      }))}
                      className="input-field"
                    >
                      <option value="flux-ai">Flux AI</option>
                      <option value="stable-diffusion">Stable Diffusion</option>
                      <option value="sdxl">SDXL</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡∏ò‡∏µ‡∏°
                    </label>
                    <select
                      value={settings.theme}
                      onChange={(e) => setSettings(prev => ({ 
                        ...prev, 
                        theme: e.target.value as 'light' | 'dark' 
                      }))}
                      className="input-field"
                    >
                      <option value="light">‡∏™‡∏ß‡πà‡∏≤‡∏á</option>
                      <option value="dark">‡∏°‡∏∑‡∏î</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={settings.autoSave}
                      onChange={(e) => setSettings(prev => ({
                        ...prev,
                        autoSave: e.target.checked
                      }))}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">
                      ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
                    </span>
                  </label>
                  <p className="text-xs text-gray-600 mt-1 ml-6">
                    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                  </p>
                </div>

                <div className="border-t pt-6">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={settings.nsfwMode}
                      onChange={(e) => setSettings(prev => ({
                        ...prev,
                        nsfwMode: e.target.checked
                      }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-900">
                      üîû Enable NSFW Mode (18+)
                    </span>
                  </label>
                  <p className="text-xs text-gray-600 mt-2 ml-6">
                    ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
                  </p>
                  <p className="text-xs text-gray-600 mt-1 ml-6">
                    ‚Ä¢ ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà "nsfw, nude" ‡πÉ‡∏ô Negative Prompt ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                  </p>
                  <p className="text-xs text-gray-600 mt-1 ml-6">
                    ‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á Prompt Templates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NSFW Content
                  </p>
                </div>
              </div>
            )}

            {activeTab === 'colab' && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900">Google Colab Integration</h2>
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(connectionStatus.colab)}
                    <span className="text-sm text-gray-600">
                      {getStatusText(connectionStatus.colab)}
                    </span>
                  </div>
                </div>

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                        <ExternalLink className="w-4 h-4 text-blue-600" />
                      </div>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-blue-900 mb-1">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Colab</h3>
                      <ol className="text-sm text-blue-800 space-y-1 list-decimal list-inside">
                        <li>‡πÄ‡∏õ‡∏¥‡∏î Google Colab ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î Flux AI notebook</li>
                        <li>‡∏£‡∏±‡∏ô setup cells ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies</li>
                        <li>‡∏´‡∏≤ API endpoint URL ‡∏à‡∏≤‡∏Å notebook</li>
                        <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</li>
                      </ol>
                    </div>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Colab Notebook URL
                  </label>
                  <input
                    type="url"
                    value={settings.colab.notebookUrl}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      colab: { ...prev.colab, notebookUrl: e.target.value }
                    }))}
                    placeholder="https://colab.research.google.com/drive/..."
                    className="input-field"
                  />
                  <p className="text-xs text-gray-600 mt-1">
                    URL ‡∏Ç‡∏≠‡∏á Google Colab notebook ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô Flux AI
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    API Endpoint
                  </label>
                  <input
                    type="url"
                    value={settings.colab.apiEndpoint}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      colab: { ...prev.colab, apiEndpoint: e.target.value }
                    }))}
                    placeholder="https://xxxx-xx-xx-xx-xx.ngrok-free.app"
                    className="input-field"
                  />
                  <p className="text-xs text-gray-600 mt-1">
                    API endpoint URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ngrok ‡∏´‡∏£‡∏∑‡∏≠ Colab
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Auth Token (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                  </label>
                  <input
                    type="password"
                    value={settings.colab.authToken || ''}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      colab: { ...prev.colab, authToken: e.target.value }
                    }))}
                    placeholder="Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authentication"
                    className="input-field"
                  />
                </div>

                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => testConnection('colab')}
                    disabled={testingConnection === 'colab'}
                    className="btn-primary disabled:opacity-50"
                  >
                    {testingConnection === 'colab' ? (
                      <>
                        <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...
                      </>
                    ) : (
                      <>
                        <Link className="w-4 h-4 mr-2" />
                        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                      </>
                    )}
                  </button>
                  
                  <a
                    href="https://colab.research.google.com/"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="btn-secondary"
                  >
                    <ExternalLink className="w-4 h-4 mr-2" />
                    ‡πÄ‡∏õ‡∏¥‡∏î Google Colab
                  </a>
                </div>
              </div>
            )}

            {activeTab === 'drive' && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900">Google Drive Integration</h2>
                  <div className="flex items-center space-x-2">
                    {getStatusIcon(connectionStatus.drive)}
                    <span className="text-sm text-gray-600">
                      {getStatusText(connectionStatus.drive)}
                    </span>
                  </div>
                </div>

                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                        <Database className="w-4 h-4 text-green-600" />
                      </div>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-green-900 mb-1">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Drive API</h3>
                      <ol className="text-sm text-green-800 space-y-1 list-decimal list-inside">
                        <li>‡πÑ‡∏õ‡∏ó‡∏µ‡πà Google Cloud Console</li>
                        <li>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ</li>
                        <li>‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Drive API</li>
                        <li>‡∏™‡∏£‡πâ‡∏≤‡∏á API credentials (API Key ‡πÅ‡∏•‡∏∞ Client ID)</li>
                        <li>‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</li>
                      </ol>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Client ID
                    </label>
                    <input
                      type="text"
                      value={settings.googleDrive.clientId}
                      onChange={(e) => setSettings(prev => ({
                        ...prev,
                        googleDrive: { ...prev.googleDrive, clientId: e.target.value }
                      }))}
                      placeholder="xxxxx.apps.googleusercontent.com"
                      className="input-field"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      API Key
                    </label>
                    <input
                      type="password"
                      value={settings.googleDrive.apiKey}
                      onChange={(e) => setSettings(prev => ({
                        ...prev,
                        googleDrive: { ...prev.googleDrive, apiKey: e.target.value }
                      }))}
                      placeholder="AIzaSyxxxxxxxxxxxxxxxxxxxxxxx"
                      className="input-field"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Discovery Document URL
                  </label>
                  <input
                    type="url"
                    value={settings.googleDrive.discoveryDoc}
                    onChange={(e) => setSettings(prev => ({
                      ...prev,
                      googleDrive: { ...prev.googleDrive, discoveryDoc: e.target.value }
                    }))}
                    className="input-field"
                    readOnly
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Scopes
                  </label>
                  <div className="bg-gray-50 p-3 rounded-lg">
                    {settings.googleDrive.scopes.map((scope, index) => (
                      <div key={index} className="text-sm text-gray-600">
                        {scope}
                      </div>
                    ))}
                  </div>
                  <p className="text-xs text-gray-600 mt-1">
                    ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Drive
                  </p>
                </div>

                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => testConnection('drive')}
                    disabled={testingConnection === 'drive'}
                    className="btn-primary disabled:opacity-50"
                  >
                    {testingConnection === 'drive' ? (
                      <>
                        <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...
                      </>
                    ) : (
                      <>
                        <Database className="w-4 h-4 mr-2" />
                        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                      </>
                    )}
                  </button>
                  
                  <a
                    href="https://console.cloud.google.com/"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="btn-secondary"
                  >
                    <ExternalLink className="w-4 h-4 mr-2" />
                    Google Cloud Console
                  </a>
                </div>
              </div>
            )}

            {activeTab === 'models' && (
              <div className="space-y-6">
                <h2 className="text-lg font-semibold text-gray-900">AI Models Management</h2>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="card p-4 border-2 border-primary-200 bg-primary-50">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-primary-900">Flux AI</h3>
                      <span className="text-xs bg-primary-200 text-primary-800 px-2 py-1 rounded">
                        ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                      </span>
                    </div>
                    <p className="text-sm text-primary-800 mb-3">
                      ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û
                    </p>
                    <div className="text-xs text-primary-700">
                      <p>‡∏Ç‡∏ô‡∏≤‡∏î: ~8GB</p>
                      <p>‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å</p>
                      <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</p>
                    </div>
                  </div>

                  <div className="card p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-gray-900">Stable Diffusion</h3>
                      <span className="text-xs bg-gray-200 text-gray-600 px-2 py-1 rounded">
                        ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-3">
                      ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
                    </p>
                    <div className="text-xs text-gray-500">
                      <p>‡∏Ç‡∏ô‡∏≤‡∏î: ~4GB</p>
                      <p>‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ‡∏î‡∏µ</p>
                      <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: ‡πÄ‡∏£‡πá‡∏ß</p>
                    </div>
                  </div>

                  <div className="card p-4">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-gray-900">SDXL</h3>
                      <span className="text-xs bg-yellow-200 text-yellow-800 px-2 py-1 rounded">
                        Beta
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-3">
                      ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏¢‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á
                    </p>
                    <div className="text-xs text-gray-500">
                      <p>‡∏Ç‡∏ô‡∏≤‡∏î: ~12GB</p>
                      <p>‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å</p>
                      <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: ‡∏ä‡πâ‡∏≤</p>
                    </div>
                  </div>
                </div>

                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-start space-x-3">
                    <AlertTriangle className="w-5 h-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                    <div>
                      <h3 className="text-sm font-medium text-yellow-900 mb-1">
                        ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Google Drive
                      </h3>
                      <p className="text-sm text-yellow-800">
                        ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 15GB ‡∏ü‡∏£‡∏µ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö AI model ‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1-2 ‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ 
                        ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Google Drive ‡πÄ‡∏õ‡πá‡∏ô 100GB
                      </p>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <h3 className="font-medium text-gray-900">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <button className="btn-secondary flex items-center justify-center">
                      <Download className="w-4 h-4 mr-2" />
                      ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
                    </button>
                    <button className="btn-secondary flex items-center justify-center">
                      <RefreshCw className="w-4 h-4 mr-2" />
                      ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡∏•
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}