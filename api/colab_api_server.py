#!/usr/bin/env python3
"""
API Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Stable Diffusion WebUI ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö ZenityX Colab Notebook

‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
1. ‡∏£‡∏±‡∏ô Stable Diffusion WebUI ‡πÉ‡∏ô Colab (‡∏ï‡∏≤‡∏° notebook ‡πÄ‡∏î‡∏¥‡∏°)
2. ‡∏£‡∏±‡∏ô script ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô cell ‡πÉ‡∏´‡∏°‡πà
3. ‡πÄ‡∏≠‡∏≤ URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô Settings > Colab API Endpoint ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import base64
import io
import json
from PIL import Image

app = Flask(__name__)
CORS(app)  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ç‡πâ‡∏≤‡∏° domain ‡πÑ‡∏î‡πâ

# URL ‡∏Ç‡∏≠‡∏á Stable Diffusion WebUI API (‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Colab)
SD_WEBUI_URL = "http://127.0.0.1:7860"

@app.route('/health', methods=['GET'])
def health_check():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Server ‡πÅ‡∏•‡∏∞ SD WebUI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        # ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å SD WebUI API
        response = requests.get(f"{SD_WEBUI_URL}/sdapi/v1/options", timeout=5)
        if response.status_code == 200:
            return jsonify({
                "status": "healthy",
                "sd_webui": "connected",
                "message": "API Server ‡πÅ‡∏•‡∏∞ SD WebUI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
            })
        else:
            return jsonify({
                "status": "degraded",
                "sd_webui": "error",
                "message": "SD WebUI ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á"
            }), 500
    except Exception as e:
        return jsonify({
            "status": "unhealthy",
            "sd_webui": "disconnected",
            "error": str(e),
            "message": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SD WebUI ‡πÑ‡∏î‡πâ"
        }), 500

@app.route('/models', methods=['GET'])
def get_models():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô SD WebUI"""
    try:
        response = requests.get(f"{SD_WEBUI_URL}/sdapi/v1/sd-models")
        if response.status_code == 200:
            models = response.json()
            return jsonify({
                "success": True,
                "models": [model["title"] for model in models]
            })
        else:
            return jsonify({
                "success": False,
                "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models ‡πÑ‡∏î‡πâ"
            }), 500
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/generate', methods=['POST'])
def generate_image():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Stable Diffusion

    Request Body:
    {
        "prompt": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
        "negative_prompt": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        "steps": 20,
        "guidance_scale": 7.5,
        "width": 512,
        "height": 512,
        "seed": -1  # -1 = random
    }
    """
    try:
        data = request.json

        # ‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å request
        prompt = data.get('prompt', '')
        negative_prompt = data.get('negative_prompt', '')
        steps = data.get('steps', 20)
        cfg_scale = data.get('guidance_scale', 7.5)
        width = data.get('width', 512)
        height = data.get('height', 512)
        seed = data.get('seed', -1)

        if not prompt:
            return jsonify({
                "success": False,
                "error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà prompt"
            }), 400

        print(f"üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ: {prompt[:50]}...")

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SD WebUI API
        payload = {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "steps": steps,
            "cfg_scale": cfg_scale,
            "width": width,
            "height": height,
            "seed": seed,
            "sampler_name": "DPM++ 2M Karras",
            "sampler_index": "DPM++ 2M Karras",
            "batch_size": 1,
            "n_iter": 1,
            "save_images": True,
            "send_images": True,
            "do_not_save_samples": False,
            "do_not_save_grid": False,
        }

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å SD WebUI API
        print("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å SD WebUI API...")
        response = requests.post(
            f"{SD_WEBUI_URL}/sdapi/v1/txt2img",
            json=payload,
            timeout=300  # timeout 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        )

        if response.status_code != 200:
            return jsonify({
                "success": False,
                "error": f"SD WebUI API error: {response.status_code}"
            }), 500

        result = response.json()

        # ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ (base64)
        if 'images' in result and len(result['images']) > 0:
            image_base64 = result['images'][0]

            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô data URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö
            image_data_url = f"data:image/png;base64,{image_base64}"

            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

            return jsonify({
                "success": True,
                "image": image_data_url,
                "info": result.get('info', {}),
                "parameters": {
                    "prompt": prompt,
                    "negative_prompt": negative_prompt,
                    "steps": steps,
                    "cfg_scale": cfg_scale,
                    "width": width,
                    "height": height,
                    "seed": result.get('parameters', {}).get('seed', seed)
                }
            })
        else:
            return jsonify({
                "success": False,
                "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ"
            }), 500

    except requests.Timeout:
        return jsonify({
            "success": False,
            "error": "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"
        }), 504
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/img2img', methods=['POST'])
def img2img():
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ img2img

    Request Body:
    {
        "prompt": "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
        "negative_prompt": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        "init_image": "data:image/png;base64,...",
        "denoising_strength": 0.7,
        "steps": 20,
        "guidance_scale": 7.5,
        "width": 512,
        "height": 512
    }
    """
    try:
        data = request.json

        prompt = data.get('prompt', '')
        negative_prompt = data.get('negative_prompt', '')
        init_image = data.get('init_image', '')
        denoising_strength = data.get('denoising_strength', 0.7)
        steps = data.get('steps', 20)
        cfg_scale = data.get('guidance_scale', 7.5)
        width = data.get('width', 512)
        height = data.get('height', 512)

        if not prompt or not init_image:
            return jsonify({
                "success": False,
                "error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà prompt ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö"
            }), 400

        # ‡∏ï‡∏±‡∏î data URL header ‡∏≠‡∏≠‡∏Å (data:image/png;base64,)
        if ',' in init_image:
            init_image = init_image.split(',')[1]

        print(f"üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ: {prompt[:50]}...")

        payload = {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "init_images": [init_image],
            "denoising_strength": denoising_strength,
            "steps": steps,
            "cfg_scale": cfg_scale,
            "width": width,
            "height": height,
            "sampler_name": "DPM++ 2M Karras",
            "batch_size": 1,
            "n_iter": 1,
        }

        response = requests.post(
            f"{SD_WEBUI_URL}/sdapi/v1/img2img",
            json=payload,
            timeout=300
        )

        if response.status_code != 200:
            return jsonify({
                "success": False,
                "error": f"SD WebUI API error: {response.status_code}"
            }), 500

        result = response.json()

        if 'images' in result and len(result['images']) > 0:
            image_base64 = result['images'][0]
            image_data_url = f"data:image/png;base64,{image_base64}"

            print("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

            return jsonify({
                "success": True,
                "image": image_data_url,
                "info": result.get('info', {}),
            })
        else:
            return jsonify({
                "success": False,
                "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ"
            }), 500

    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/', methods=['GET'])
def index():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API"""
    return jsonify({
        "name": "Colab SD WebUI API Server",
        "version": "1.0.0",
        "endpoints": {
            "health": "GET /health - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            "models": "GET /models - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ models",
            "generate": "POST /generate - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å prompt",
            "img2img": "POST /img2img - ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
        },
        "status": "running"
    })

if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ Starting Colab SD WebUI API Server...")
    print("=" * 60)
    print(f"üì° SD WebUI URL: {SD_WEBUI_URL}")
    print("üåê API Server will run on: http://0.0.0.0:8000")
    print("=" * 60)
    print("\n‚ö†Ô∏è  ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°:")
    print("1. ‡πÄ‡∏õ‡∏¥‡∏î Stable Diffusion WebUI ‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏±‡∏ô cell 1.0.1)")
    print("2. ‡∏£‡∏≠‡πÉ‡∏´‡πâ WebUI ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÄ‡∏´‡πá‡∏ô URL ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)")
    print("3. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Cloudflare URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å terminal ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå")
    print("=" * 60)

    # ‡∏£‡∏±‡∏ô Flask server
    app.run(host='0.0.0.0', port=8000, debug=False)
