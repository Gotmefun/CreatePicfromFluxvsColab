# ===================================================================
# ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Code ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô Cell ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Colab Notebook
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Cell 1.0.2
# ===================================================================

#@title ## 1.0.3 üåê Start API Server (‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å WebUI ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß) { display-mode: "form" }

#@markdown ---
#@markdown ### üì° API Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
#@markdown ‡∏£‡∏±‡∏ô Cell ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î API Server ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á SD WebUI ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

import os
import time
import subprocess
import threading
from IPython.display import clear_output, display, HTML

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
print("üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies...")
!pip install -q flask flask-cors pyngrok

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå api
!mkdir -p /content/api

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå API Server
api_server_code = '''#!/usr/bin/env python3
"""API Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Stable Diffusion WebUI ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import base64

app = Flask(__name__)
CORS(app)

SD_WEBUI_URL = "http://127.0.0.1:7860"

@app.route('/health', methods=['GET'])
def health_check():
    try:
        response = requests.get(f"{SD_WEBUI_URL}/sdapi/v1/options", timeout=5)
        if response.status_code == 200:
            return jsonify({"status": "healthy", "sd_webui": "connected", "message": "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"})
        return jsonify({"status": "degraded", "sd_webui": "error"}), 500
    except Exception as e:
        return jsonify({"status": "unhealthy", "error": str(e)}), 500

@app.route('/models', methods=['GET'])
def get_models():
    try:
        response = requests.get(f"{SD_WEBUI_URL}/sdapi/v1/sd-models")
        if response.status_code == 200:
            models = response.json()
            return jsonify({"success": True, "models": [model["title"] for model in models]})
        return jsonify({"success": False, "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á models ‡πÑ‡∏î‡πâ"}), 500
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/generate', methods=['POST'])
def generate_image():
    try:
        data = request.json
        prompt = data.get('prompt', '')
        negative_prompt = data.get('negative_prompt', '')
        steps = data.get('steps', 20)
        cfg_scale = data.get('guidance_scale', 7.5)
        width = data.get('width', 512)
        height = data.get('height', 512)
        seed = data.get('seed', -1)

        if not prompt:
            return jsonify({"success": False, "error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà prompt"}), 400

        print(f"üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ: {prompt[:50]}...")

        payload = {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "steps": steps,
            "cfg_scale": cfg_scale,
            "width": width,
            "height": height,
            "seed": seed,
            "sampler_name": "DPM++ 2M Karras",
            "batch_size": 1,
            "n_iter": 1,
            "save_images": True,
            "send_images": True,
        }

        response = requests.post(f"{SD_WEBUI_URL}/sdapi/v1/txt2img", json=payload, timeout=300)

        if response.status_code != 200:
            return jsonify({"success": False, "error": f"API error: {response.status_code}"}), 500

        result = response.json()

        if 'images' in result and len(result['images']) > 0:
            image_base64 = result['images'][0]
            image_data_url = f"data:image/png;base64,{image_base64}"
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

            return jsonify({
                "success": True,
                "image": image_data_url,
                "info": result.get('info', {}),
                "parameters": {
                    "prompt": prompt,
                    "negative_prompt": negative_prompt,
                    "steps": steps,
                    "cfg_scale": cfg_scale,
                    "width": width,
                    "height": height,
                    "seed": result.get('parameters', {}).get('seed', seed)
                }
            })
        return jsonify({"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"}), 500

    except requests.Timeout:
        return jsonify({"success": False, "error": "Timeout"}), 504
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/img2img', methods=['POST'])
def img2img():
    try:
        data = request.json
        prompt = data.get('prompt', '')
        negative_prompt = data.get('negative_prompt', '')
        init_image = data.get('init_image', '')
        denoising_strength = data.get('denoising_strength', 0.7)
        steps = data.get('steps', 20)
        cfg_scale = data.get('guidance_scale', 7.5)
        width = data.get('width', 512)
        height = data.get('height', 512)

        if not prompt or not init_image:
            return jsonify({"success": False, "error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà prompt ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"}), 400

        if ',' in init_image:
            init_image = init_image.split(',')[1]

        print(f"üé® ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ: {prompt[:50]}...")

        payload = {
            "prompt": prompt,
            "negative_prompt": negative_prompt,
            "init_images": [init_image],
            "denoising_strength": denoising_strength,
            "steps": steps,
            "cfg_scale": cfg_scale,
            "width": width,
            "height": height,
            "sampler_name": "DPM++ 2M Karras",
            "batch_size": 1,
            "n_iter": 1,
        }

        response = requests.post(f"{SD_WEBUI_URL}/sdapi/v1/img2img", json=payload, timeout=300)

        if response.status_code != 200:
            return jsonify({"success": False, "error": f"API error: {response.status_code}"}), 500

        result = response.json()

        if 'images' in result and len(result['images']) > 0:
            image_base64 = result['images'][0]
            image_data_url = f"data:image/png;base64,{image_base64}"
            print("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return jsonify({"success": True, "image": image_data_url, "info": result.get('info', {})})

        return jsonify({"success": False, "error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"}), 500

    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/', methods=['GET'])
def index():
    return jsonify({
        "name": "Colab SD WebUI API Server",
        "version": "1.0.0",
        "endpoints": {
            "health": "GET /health",
            "models": "GET /models",
            "generate": "POST /generate",
            "img2img": "POST /img2img"
        },
        "status": "running"
    })

if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ Colab SD WebUI API Server Starting...")
    print("=" * 60)
    app.run(host='0.0.0.0', port=8000, debug=False)
'''

# ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå API Server
with open('/content/api/colab_api_server.py', 'w') as f:
    f.write(api_server_code)

print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå API Server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô API Server
def run_api_server():
    os.chdir('/content/api')
    subprocess.run(['python', 'colab_api_server.py'])

# ‡∏£‡∏±‡∏ô API Server ‡πÉ‡∏ô background thread
print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° API Server...")
server_thread = threading.Thread(target=run_api_server, daemon=True)
server_thread.start()

# ‡∏£‡∏≠‡πÉ‡∏´‡πâ server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
time.sleep(5)

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
import requests
try:
    response = requests.get('http://127.0.0.1:8000/health', timeout=5)
    if response.status_code == 200:
        print("‚úÖ API Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!\n")
    else:
        print("‚ö†Ô∏è API Server ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n")
except Exception as e:
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API Server: {e}\n")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Public URL ‡∏î‡πâ‡∏ß‡∏¢ ngrok
print("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Public URL...")

USE_NGROK = True  #@param {type:"boolean"}
NGROK_TOKEN = ""  #@param {type:"string"}

if USE_NGROK:
    from pyngrok import ngrok

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ngrok token (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if NGROK_TOKEN:
        ngrok.set_auth_token(NGROK_TOKEN)

    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á tunnel
        public_url = ngrok.connect(8000)

        clear_output()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        display(HTML(f'''
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 15px; color: white; font-family: Arial;">
            <h1 style="margin: 0 0 20px 0; font-size: 32px;">‚úÖ API Server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!</h1>

            <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 20px 0;">
                <h2 style="margin: 0 0 10px 0; font-size: 20px;">üåê Public URL</h2>
                <div style="background: rgba(0,0,0,0.3); padding: 15px; border-radius: 8px; font-family: monospace; font-size: 18px; word-break: break-all;">
                    {public_url}
                </div>
            </div>

            <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 20px 0;">
                <h3 style="margin: 0 0 15px 0;">üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:</h3>
                <ol style="margin: 0; padding-left: 20px; line-height: 1.8;">
                    <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô</li>
                    <li>‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå <a href="https://aigen.ptee88.com" style="color: #ffd700;">https://aigen.ptee88.com</a></li>
                    <li>‡πÑ‡∏õ‡∏ó‡∏µ‡πà Settings ‚öôÔ∏è</li>
                    <li>‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏ó‡∏µ‡πà <strong>Google Colab Settings</strong></li>
                    <li>‡∏ß‡∏≤‡∏á URL ‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á <strong>API Endpoint</strong></li>
                    <li>‡∏Å‡∏î <strong>Save Settings</strong></li>
                    <li>‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ <strong>AI Generation</strong> ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ!</li>
                </ol>
            </div>

            <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px;">
                <p style="margin: 0; font-size: 14px;">üí° <strong>Tips:</strong> ‡πÄ‡∏ã‡∏ü URL ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î Colab ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ URL ‡πÉ‡∏´‡∏°‡πà</p>
            </div>
        </div>
        '''))

        print("\n" + "="*70)
        print("üîó API Endpoints:")
        print("="*70)
        print(f"   Health Check:  {public_url}/health")
        print(f"   List Models:   {public_url}/models")
        print(f"   Generate:      {public_url}/generate (POST)")
        print(f"   Img2Img:       {public_url}/img2img (POST)")
        print("="*70)

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ngrok tunnel: {e}")
        print("\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ:")
        print("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://dashboard.ngrok.com/get-started/your-authtoken")
        print("   2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å token")
        print("   3. ‡πÉ‡∏™‡πà‡πÉ‡∏ô NGROK_TOKEN ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
        print("   4. ‡∏£‡∏±‡∏ô Cell ‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
else:
    print("="*70)
    print("‚úÖ API Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (Local Only)")
    print("="*70)
    print("üîó Local URL: http://127.0.0.1:8000")
    print("="*70)
    print("\n‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:")
    print("   1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô USE_NGROK = True")
    print("   2. ‡πÉ‡∏™‡πà NGROK_TOKEN")
    print("   3. ‡∏£‡∏±‡∏ô Cell ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    print("="*70)
